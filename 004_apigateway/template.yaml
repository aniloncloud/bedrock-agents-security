AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Application Model template describing your function.

Parameters:
  CognitoUserPoolArn:
    Type: String
    Default: "arn:aws:cognito-idp:us-east-1:624178040188:userpool/us-east-1_3PtOz2Eah"
  BedrockAgentAliasId:
    Type: String 
    Default: "N2JCGXFUEM"    
  BedrockAgentId:
    Type: String
    Default: "SK8ZXR39DP"    
  
    
Resources:

  ApiGwAccountConfig:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt "ApiGatewayLoggingRole.Arn"
      
  ApiGatewayLoggingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
        
  AccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/${AWS::StackName}/APIAccessLogs"
      
  ClaimsAPI:
    Type: AWS::Serverless::Api
    Name: ClaimsAPI
    Properties:
      StageName: Prod
      EndpointConfiguration:
          Type: REGIONAL    
      Cors:
        AllowMethods: "'PUT, POST, GET, DELETE, OPTIONS'"
        AllowHeaders: "'Content-Type', 'Authorization', 'X-Forwarded-For', 'X-Api-Key', 'X-Amz-Date', 'X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      AccessLogSetting:
        DestinationArn: !GetAtt AccessLogs.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "integrationStatus": $context.integrationStatus, "integrationLatency": $context.integrationLatency, "responseLength":"$context.responseLength" }'
      Auth:
            DefaultAuthorizer: CognitoUserPoolAuthorizer # OPTIONAL        
            Authorizers:
              CognitoUserPoolAuthorizer:
                UserPoolArn: !Ref CognitoUserPoolArn
                Identity: # OPTIONAL
                  Header: Authorization # OPTIONAL; Default: 'Authorization'  
      DefinitionBody:
        swagger: '2.0'
        paths:
          /claims:
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${claimsinvokebedrockagents.Arn}/invocations
              responses: {}
              security:
                - CognitoAuthorizer: []
      Tags:
        Name: !Sub "${AWS::StackName}-API"
        Stack: !Sub "${AWS::StackName}"                
        # securityDefinitions:
        #   CognitoAuthorizer:
        #     type: apiKey
        #     name: Authorization
        #     in: header
        #     x-amazon-apigateway-authtype: cognito_user_pools
        #     x-amazon-apigateway-authorizer:
        #       type: cognito_user_pools
        #       providerARNs:
        #         - !Ref CognitoUserPoolArn
                
  InvokeFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${claimsinvokebedrockagents}"
      RetentionInDays: 7
      
  claimsinvokebedrockagents:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./invoke-lambda
      Description: ''
      MemorySize: 128
      Timeout: 180
      Handler: invoke-lambda.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:
          AGENT_ALIAS_ID: !Ref BedrockAgentAliasId
          AGENT_ID: !Ref BedrockAgentId
# BCXDCFUWAG VWF5DFLKSL
      Layers:
         - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:bedrock-layer:2
      PackageType: Zip
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeAgent
              Resource: '*'
            # - Effect: Allow
            #   Action:
            #     - logs:CreateLogGroup
            #   Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
            # - Effect: Allow
            #   Action:
            #     - logs:CreateLogStream
            #     - logs:PutLogEvents
            #   Resource:
            #     - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/claims-invoke-bedrock-agents:*

      SnapStart:
        ApplyOn: None
      # Events:
      #   Api1:
      #     Type: Api
      #     Properties:
      #       Path: /claims
      #       Method: ANY
      #       RestApiId:
      #         Ref: ApiGatewayApi            
      #       Auth:
      #         Authorizers: !Ref CognitoAuthorizer

      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto

  # CognitoAuthorizer:
  #   Type: AWS::ApiGateway::Authorizer
  #   Properties:
  #     Name: CognitoUserPoolAuthorizerTest
  #     Type: COGNITO_USER_POOLS
  #     IdentitySource: method.request.header.Authorization
  #     ProviderARNs:
  #       - !Ref CognitoUserPoolArn
  #     RestApiId: !Ref ApiGatewayApi
  
Outputs:
  APIEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ClaimsAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod"

  APIID:
    Description: "API Gateway ID"
    Value: !Sub "${ClaimsAPI}"  